import os
from unittest.mock import patch

with patch('database.init_db.init_db'), \
        patch('database.init_db.create_tables'):
    from tests.test_utils import load_news_from_dir
    from utils.news.important_news import get_important_news


def test_get_important_news() -> None:
    """
    Tests get_important_news function
    """
    data_dir = os.path.join(os.path.dirname(__file__), 'data')
    news = load_news_from_dir(data_dir)
    important_news = get_important_news(news, 'description')

    actual = {id: news_item['importance']
              for id, news_item in important_news.items()}
    expected = {'6049394458971597468': 2.0239550032588203, '4457673410068488150': 1.7840014115579694, '3232520032701218817': 1.6769980571073575, '3270947201236837767': 1.4618226284457976, '4408843533799644020': 1.446590308458494, '2952168276410620286': 1.2521624076199964, '979025652461928862': 1.246094242853118, '1906259068725363965': 1.2006094851469324, '8211796118481681273': 1.1443087117038195, '4255870151932984461': 1.1396016242373634, '5083624909196031876': 1.1225660506462896, '7720720362422410409': 1.1066706211788306, '7719313014531830067': 1.0219368515592187, '2046649311940024345': 1.0124453130778897, '8081595657655941016': 1.0001889842314482, '5641607859976004885': 0.9997169861126198,
                '6718760237732508493': 0.8988302295023135, '2547606122880455985': 0.8965521895760689, '9073108373000108053': 0.8696037264609409, '8965383178459808462': 0.8688375995589929, '1066348599423775721': 0.835732424912917, '6205571237385168549': 0.8267001218102289, '1816134593642589133': 0.8229129153166695, '6681247523478043470': 0.8208189352161529, '5897938562860003904': 0.8046267409768856, '809070968785199941': 0.7318351883575932, '8013334774008502268': 0.6938961508778122, '129251292489994149': 0.633285973700844, '6023222182896830417': 0.5617077584182708, '6831006204920480013': 0.5266657633586865, '6473208710660374843': 0.467596594263777, '2498842934204653860': 0.459752531934163}

    keys_actual = set(actual.keys())
    keys_expected = set(expected.keys())
    assert keys_actual == keys_expected
    for key in keys_actual:
        assert abs(actual[key] - expected[key]) < 1e-12
